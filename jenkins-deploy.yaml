pipeline {
    agent any
    environment {
        OPENSHIFT_SERVER = 'https://api.crc.testing:6443'
        TOKEN = credentials('jenkins-deployer')
        JSON_FILE = 'replicas.json'
    }
    stages {
        stage('Login to OpenShift') {
            steps {
                script {
                    bat """
                    oc login %OPENSHIFT_SERVER% --token=%TOKEN% --insecure-skip-tls-verify
                    """
                }
            }
        }
        stage('Fetch Projects and Deployments') {
            steps {
                script {
                    def replicasData = [:]

                    // Obtener los proyectos de OpenShift
                    def projectsOutput = bat(script: 'oc get projects -o jsonpath="{.items[*].metadata.name}"', returnStdout: true).trim()
                    def projects = projectsOutput.split('\\s+').findAll { it =~ /^[a-zA-Z0-9-]+$/ } // Solo nombres válidos de namespaces
                    echo "Projects: ${projects}"

                    // Iterar sobre los proyectos
                    for (project in projects) {
                        echo "Processing project: ${project}"

                        // Obtener los despliegues del proyecto
                        def deploymentsOutput = bat(script: "oc get deployments -n ${project} -o jsonpath=\"{.items[*].metadata.name}\"", returnStdout: true).trim()
                        def deployments = deploymentsOutput.split('\\s+').findAll { it =~ /^[a-zA-Z0-9-]+$/ } // Solo nombres válidos de despliegues
                        echo "Deployments in project ${project}: ${deployments}"

                        // Obtener réplicas para cada despliegue
                        for (deployment in deployments) {
                            def replicas = bat(script: "oc get deployment ${deployment} -n ${project} -o jsonpath=\"{.spec.replicas}\"", returnStdout: true).trim()
                            replicasData["${project}/${deployment}"] = replicas
                            echo "Deployment: ${deployment}, Replicas: ${replicas}"
                        }
                    }

                    // Guardar los datos en un archivo JSON
                    writeFile file: JSON_FILE, text: groovy.json.JsonOutput.toJson(replicasData)
                    echo "Replica data saved to ${JSON_FILE}"
                }
            }
        }
    }
    post {
        always {
            bat "oc logout"
        }
    }
}
